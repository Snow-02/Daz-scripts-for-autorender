// DAZ Studio version 4.22.0.19 filetype DAZ Script
// DAZ Studio Script

var appName = "export_to_blender";
var version = "\"4.2.0.2261\"";
var useExportHD = false;
var useHDConvention = false;
var useHDUVs = true;

function exportHighdefToBlender(filepath)
{
    var date1 = new Date();
    var time1 = date1.getTime();
    var filepath0 = filepath + "0"
    fp = new DzFile( filepath0 );
    fp.open( fp.WriteOnly );

    fp.writeLine("{");
    fp.writeLine("    \"application\": \"export_highdef_to_blender\",");
    fp.writeLine("    \"version\": " + version + ",");

    fp.writeLine("    \"figures\": [");

    for ( var i = 0; i < Scene.getNumNodes(); i++ )
    {
        var node = Scene.getNode(i);

        if ( node.inherits( "DzSkeleton" ) )
        {
            doFigure(fp, node);
        }
        else
        {
            obj = node.getObject();
            if (obj != null)
            {
                doMesh(fp, obj, true, node, "        ]", "    },");
            }
            else
            {
                var clname = node.className();
                if (clname != "DzBone")
                {
                    startObject(fp, node, node.assetId, "", "");
                    fp.writeLine("    }," );    
                }
            }
        }
    }

    fp.writeLine("    {" );
    fp.writeLine("        \"name\": \"dummy\",");
    fp.writeLine("        \"num verts\": 0");
    fp.writeLine("    }" );

    fp.writeLine("    ]");
    fp.writeLine("}" );
    fp.close();

    var fp1 = new DzGZFile( filepath );
    var ok = fp1.zip(filepath0);
    fp1.close();
    if (ok) {
        fp.remove()
    }
    else {
        var oDir = fp.dir();
        oDir.move(filepath0, filepath)
    }

    var date2 = new Date();
    var time2 = date2.getTime();
    if (ok)
        msg = "GZipped file \"" + filepath + "\"\nsaved in " + (time2-time1)/1000 + " seconds.";
    else
        msg = "Text file \"" + filepath + "\"\nsaved in " + (time2-time1)/1000 + " seconds.";
    print(msg);
}


function doFigure(fp, figure)
{
    figure.finalize();
    startObject(fp, figure, figure.name, "", ",");

    var obj = figure.getObject();
    if (obj != null)
    {
        doMesh(fp, obj, false, figure, "        ],", "");
    }

    var bones = figure.getAllBones();
    var n = bones.length;

    fp.writeLine("        \"bones\": ");
    fp.writeLine("        [");
    c = ","
    for( var i = 0; i < n; i++ )
    {
        bone = bones[i];
        bone.finalize();
        startObject(fp, bone, bone.name, "        ", ",")
        fp.writeLine("                \"origin\": " + bone.getOrigin());             
        if (i == n-1) c = "";
        fp.writeLine("            }" + c );
    }
    fp.writeLine("        ]");
    fp.writeLine("    }," );
}

//===============================================================================
//
//===============================================================================

function startObject(fp, node, name, pad, endchar)
{        
    fp.writeLine(pad + "    {" );
    fp.writeLine(pad + "        \"name\": \"" + normString(name) + "\",");
    fp.writeLine(pad + "        \"id\": \"" + normString(node.assetId) + "\",");
    fp.writeLine(pad + "        \"label\": \"" + normString(node.getLabel()) + "\",");
    fp.writeLine(pad + "        \"center_point\": " + node.getOrigin() + ",");
    fp.writeLine(pad + "        \"end_point\": " + node.getEndPoint() + ",");     
    fp.writeLine(pad + "        \"orientation\": " + node.getOrientation() + ",");             
    fp.writeLine(pad + "        \"rotation_order\": \"" + node.getRotationOrder() + "\",");             
    fp.writeLine(pad + "        \"ws_transform\": " + node.getWSTransform() + endchar);             
}


function normString(string)
{
    return string.replace(/\n/g, " ");
}


function doMesh(fp, obj, start, node, str1, str2)
{
    var shape = obj.getCurrentShape();
    if (shape == null)
        return false;
    var clname = node.className();
    if (start)
        startObject(fp, node, node.name, "", ",");
    fp.writeLine("        \"class\": \"" + clname + "\",");
    var useBase = true;
    var label = node.getLabel();
    if (useExportHD && (label.endsWith("HD") || !useHDConvention))
        useBase = doHDMesh(fp, obj, shape, clname, node, str1, str2);
    if (useBase)
    	doBaseMesh(fp, obj, shape, clname, node, str1, str2);
}


function doHDMesh(fp, obj, shape, clname, node, str1, str2)
{
    //obj.forceCacheUpdate(node,false);
    var geom = obj.getCachedGeom();
    var geom0 = shape.getGeometry();
    var nv = geom.getNumVertices();
    var nv0 = geom0.getNumVertices();
    var level = shape.getSubDDrawLevel();

    if (clname == "DzGeometryShellNode") {
        fp.writeLine("        \"num verts\": " + nv0 + ",");
        fp.writeLine("        \"num hd verts\": " + nv + ",");
        if (useHDUVs)
            doUVs(fp, geom, "hd ");
        doFaces(fp, geom, "hd ");
        doMaterialGroups(fp, geom, "hd ", "");
        fp.writeLine(str2);
	return false;
    }

    var nf = geom.getNumFacets();
    if (nv != nv0 && nf > 0)
    {
        fp.writeLine("        \"subd level\": " + level + ",");
        doVertices(fp, geom, "hd ");
        fp.writeLine("        ],");
        if (useHDUVs)
            doUVs(fp, geom, "hd ");
        doFaces(fp, geom, "hd ");
        doMaterialGroups(fp, geom, "hd ", ",");
    }
    return true;
}


function doBaseMesh(fp, obj, shape, clname, node, str1, str2)
{
    var lodctrl = shape.getLODControl();
    var lodvalue = lodctrl.getValue();
    lodctrl.setValue(0);
    obj.forceCacheUpdate(node,false);
    var geom = obj.getCachedGeom();
    if (geom == null) {
        lodctrl.setValue(lodvalue);
        return endMesh(fp, str1, str2);
    }

    if (clname == "DzStrandHairNode")
    {
        fp.writeLine("        \"node\": {");
        doProperties(fp, node, "        ");
        fp.writeLine("        },");
        doFaces(fp, geom, "");
    }
    
    fp.writeLine("        \"lod\": " + lodvalue + ",");
    var nf = geom.getNumFacets();
    if (nf == 0)
        doPolylines(fp, geom, "");
    doMaterialGroups(fp, geom, "", ",");
    doVertices(fp, geom, "");
    fp.writeLine(str1);
    fp.writeLine(str2);
    lodctrl.setValue(lodvalue);
    return true;
}


function endMesh(fp, str1, str2)
{
    fp.writeLine("        \"dummy\": 0")
    fp.writeLine(str2);
    return false;
}


function doProperties(fp, mat, pad)
{
    var np = mat.getNumProperties();
    var buf = (pad + "   \"name\": \"" + mat.name + "\",\n");
    buf += (pad + "   \"properties\": {\n" );

    var c = ","
    for (var i = 0; i < np; i++)
    {
        var prop = mat.getProperty(i);
        var value = prop.getValue();
        if (i == np-1) c = "";
        if (prop.isNumeric())
            buf += (pad + "      \"" + prop.name + "\": " + value + c + "\n");
    }
    buf += (pad + "   }");
    fp.writeLine(buf);
}

function doMaterialGroups(fp, geom, hd, endchar)
{
    var nm = geom.getNumMaterialGroups();
    fp.writeLine("        \"" + hd + "material groups\": [" );

    var c = ","
    for (var i = 0; i < nm; i++)
    {
        var mat = geom.getMaterialGroup(i);
        if (i == nm-1) c = "";
        fp.writeLine("            \"" + mat.name + "\"" + c);
    }
    fp.writeLine("        ]" + endchar);
}

function doVertices(fp, geom, hd)
{
    var nv = geom.getNumVertices();
    var nf = geom.getNumFacets();
    var buf = ("        \"num " + hd + "verts\": " + nv + ",\n");
    buf += ("        \"" + hd + "vertices\": [\n" );

    var c = ",\n"
    for (var i = 0; i < nv; i++)
    {
        var v = geom.getVertex(i);
        if (i == nv-1) c = "";
        buf += ("            [" + v.x + ", " + v.y + ", " + v.z + "]" + c)
    }
    fp.writeLine(buf);
}

function doUVs(fp, geom, hd)
{
    var uvs = geom.getUVs();
    var nuv = uvs.getNumValues();
    var label = uvs.getLabel();
    var buf = ("        \"" + hd + "uvset\": \"" + label + "\",\n");
    buf += ("        \"" + hd + "uvs\": [\n" );
    var c = ",\n"
    for (var i = 0; i < nuv; i++)
    {
        var uv = uvs.getPnt2Vec(i);
        if (i == nuv-1) c = "\n";
        buf += ("            [" + uv.x + ", " + uv.y + "]" + c);
    }
    buf += ("        ],");
    fp.writeLine(buf);
}

function doPolylines(fp, geom, hd)
{
    var npl = geom.getNumPolylines();
    var buf = ("        \"" + hd + "polylines\": [\n" );
    var c = ",\n"
    for (var i = 0; i < npl; i++)
    {
        var vlist = geom.getPolylineVertexIndices(i);
        if (i == npl-1) c = "\n";
        buf += ("            [" + vlist + "]" + c)
    }
    buf += ("        ],");
    fp.writeLine(buf);

    buf = ("        \"" + hd + "polyline_materials\": [" );
    c = ","
    for (var i = 0; i < npl; i++) 
    {
        var idx = geom.getPolylineMaterialGroupIndex(i);
        if (i == npl-1) c = "";
        buf += (idx + c)
    }
    buf += ("],");
    fp.writeLine(buf);    
}

function doFaces(fp, geom, hd)
{
    var nf = geom.getNumFacets();
    var buf = ("        \"" + hd + "faces\": [\n" );
    var c = ",\n"
    for (var i = 0; i < nf; i++)
    {
        var f = geom.getFacet(i);
        if (i == nf-1) c = "\n";
        buf += ("            " + f + c)
    }
    buf += ("        ],");
    fp.writeLine(buf);
}

function getScenePath()
{
    var fPath = Scene.getFilename(); //get current scene file path
    var val = fPath.left( fPath.length - 4 ) + ".dbz"; // .duf => .dbz
    return (val);
}

function export_to_blender (){
    var filepath =  getScenePath();
    exportHighdefToBlender(filepath);
};


(function (){
	// set assert path
	var assetList = [
	    "D:/Daz3D/ziyuanku/People/Genesis 9/Clothing/Sade/dForce Ay Lin/dForce Ay Lin Dress Genesis 9.duf",
	    "D:/Daz3D/ziyuanku/People/Genesis 9/Clothing/Otart/Triple Desire Set/Triple Desire Luxury Dress Assimetric.duf"
	];
	var figure = "D:/Daz3D/ziyuanku/People/Genesis 9/Characters/RY Tiffany HD.duf";
	var hair = "D:/Daz3D/ziyuanku/People/Genesis 9/Hair/Toyen/Side Braid/Side Braid.duf";
	// set output path
	var outputPath = "D:/Dazexport/G8export/";
	if(!DzDir(outputPath).exists()){
	   DzDir("").mkpath(outputPath)
	}
	var dufpath;
	//
	for (var i = 0; i < assetList.length; i++) {
	    // 
	    Scene.clear();
	    
	    // 
		var oMyasset=App.getContentMgr ();
		if(oMyasset){
			debug("read successfully");}
		oMyasset.openFile(figure);
	    oMyasset.openFile(assetList[i],merge=true);
	    oMyasset.openFile(hair,merge=true);
	
	    //
		// Get the primary selection to use for the file name
		var oNode = Scene.getPrimarySelection();
		// If something is selected
		if( oNode ){
			// Get the node's skeleton
			var oSkeleton = oNode.getSkeleton();
			// If it has a skeleton
			if( oSkeleton )	{
				// That is the node we want for the name
				oNode = oSkeleton;
			}
		}
		// Save scene
		//var duffolder = outputpath + "model_" + i + "/"
		dufpath = outputPath + "model_" + i + "/"+ "model_" + i + ".duf";
		Scene.saveScene(dufpath);
		
		// Export to blender
		export_to_blender();
	
	}
	print("finished!");
})();
